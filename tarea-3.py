# -*- coding: utf-8 -*-
"""Tarea3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DnPXr8BFMkeA0lVnrQ5qLfM-Eqna_5l4
"""

# Creamos la primera función

import estructura
# usuario: id_usuario (str), lugares_visitados (dict)
estructura.mutable("usuario", "id_usuario lugares_visitados")

# Ejemplo
usuario("jperez",{"mercado1":13, "cafeteria":15, "tienda2": 11})

# definimos una lista vacía para ir de a poco "rellenándola"
nuevaLUsuarios=[]

# cargarUbicacionesALista: archivo -> lista
def cargarUbicacionesALista(archivo1):
  # Hagamos que se imprima linea a linea el archivo dado
  listaUsuarios=[]
  archivo=open(archivo1,"r")
  for linea in archivo:
    # Definimos una función para encontrar las comas (que van separando nuestros datos)
    def encontrarComa(linea):
      return linea.find(",")
    x=encontrarComa(linea)
    ide=linea[0:x]
    a=len(linea)
    nuevaLinea=linea[x+1:a-1]
    y=encontrarComa(nuevaLinea)
    lugar1=nuevaLinea[0:y]
    otraLinea=nuevaLinea[y+1:a-1]
    hora1=otraLinea[0:a-1]
    listaUsuarios.append(usuario(ide,{lugar1:int(hora1)}))
  listaNombres=[]

  for usuario1 in listaUsuarios:
    if usuario1.id_usuario in listaNombres:
      for usuario2 in nuevaLUsuarios:
        if usuario2.id_usuario==usuario1.id_usuario:
          for i in usuario1.lugares_visitados:
            lugar=i
          usuario2.lugares_visitados[lugar]=usuario1.lugares_visitados[lugar]
      
    else:
      listaNombres.append(usuario1.id_usuario)
      nuevaLUsuarios.append(usuario1)
  archivo.close
  return nuevaLUsuarios

# Nos entrega el nombre de una persona y nos debe devolver el lugar (o índice)
# en el cual está ubicada su estructura en nuestra lista
# indiceId: str -> int
def indiceId(id1):
  assert type(id1)==str
  global nuevaLUsuarios
  suma=0
  for usuario1 in nuevaLUsuarios:
    if usuario1.id_usuario==id1:
      return suma
    else:
      suma=suma+1
  return -1

#FUNCIÓN CONTACTOESTRECHO
# contactoEstrecho: usuario usuario -> bool
# le entregamos dos estructuras de tipo de usuario y nos devuelve un booleano
def contactoEstrecho(usuario1,usuario2):
  for y in usuario2.lugares_visitados:
    lugar2=y
    for i in usuario1.lugares_visitados:
      lugar=i
      if usuario1.lugares_visitados[lugar]==usuario2.lugares_visitados[lugar2]:
        return True
  else:
    return False

assert contactoEstrecho(usuario("jperez",{'mercado1': 13, 'cafeteria3': 15, 'tienda2': 11}),usuario("rmunoz",{'feria2': 10, 'tienda2': 11, 'mercado1': 13})) == True
assert contactoEstrecho(usuario("aruiz",{'cafeteria3': 15}),usuario("cgonzalez",{'feria2':10})) == False

# FUNCIÓN IMPRIMECONTACTOSESTRECHOSENTRE
# imprimeContactosEstrechosEntre: usuario usuario -> str
# Nos dice dónde (si es que lo hicieron) y a qué hora coincidieron dos
# estructuras usuario
def imprimeContactosEstrechosEntre(usuario1,usuario2):
  x=0
  for y in usuario2.lugares_visitados:
    lugar2=y
    for i in usuario1.lugares_visitados:
      lugar=i
      if usuario1.lugares_visitados[lugar]==usuario2.lugares_visitados[lugar2]:
        x+=1
        print(usuario1.id_usuario,"coincidió con", usuario2.id_usuario, "en", lugar, "a las", usuario1.lugares_visitados[lugar], "horas")    
  if x==0:
    None

imprimeContactosEstrechosEntre(usuario("jperez",{'mercado1': 13, 'cafeteria3': 15, 'tienda2': 11}),usuario("rmunoz",{'feria2': 10, 'tienda2': 11, 'mercado1': 13}))
imprimeContactosEstrechosEntre(usuario("aruiz",{'cafeteria3': 15}),usuario("cgonzalez",{'feria2':10}))

#FUNCIÓN IMPRIMECONTACTOSESTRECHOSDE
# imprimeContactosEstrechosDe: str -> str
def imprimeContactosEstrechosDe(id_sospechoso):
  global listaDeUsuarios
  usuario1=indiceId(id_sospechoso)
  if usuario1!=-1:
    id_sospechoso=nuevaLUsuarios[usuario1]
    for user in nuevaLUsuarios:
      if user!=id_sospechoso:
        if contactoEstrecho(id_sospechoso,user):
          imprimeContactosEstrechosEntre(id_sospechoso,user)
  else:
    print("No se registran movimientos para el usuario:", id_sospechoso)

imprimeContactosEstrechosDe("jperez")

# definimos la función auxiliar para el sistema trazador
def archivador():
  archivo=input("Ingrese el nombre del archivo de ubicación: ")
  if archivo == "fin":
    print("Gracias por usar el Sistema Trazador de Contactos COVID19")
  else:
    cargarUbicacionesALista(archivo)
    assert cargarUbicacionesALista(archivo)!=[]
    print("Archivo", archivo , "cargado al sistema.")
    print()
    id_sospechoso = input("Ingrese el identificador de la persona sospechosa de covid (o 'fin'): ")
  # indice1=indiceId(id_sospechoso)
    print()
    global nuevaLUsuarios
    imprimeContactosEstrechosDe(id_sospechoso)
    print()
    archivador()

# CREAMOS EL SISTEMA
def sistemaTrazador():
  print("Sistema Trazador de Contactos COVID19")
  print() #para que quede igual al enunciado, estéticamente
  archivador()

sistemaTrazador()