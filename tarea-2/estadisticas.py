# -*- coding: utf-8 -*-
"""estadisticas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1fVJeALA-KtICsr5aM29ATRALZvxafwDC
"""

# primero, importamos las funciones auxiliares que necesitaremos
import estructura
from abstraccion import *
from lista import *

# funciones auxiliares para el programa de la Tarea 2
# resultadoMesa: circunscripcion (str), mesa (int), apruebo (int), rechazo (int)
estructura.crear("resultadoMesa","circunscripcion numeroMesa apruebo rechazo") #creamos una estructura compleja con todos los datos que queremos recolectar
r1=resultadoMesa("Providencia",2,30, 40)
r2=resultadoMesa("Recoleta",4, 40,20)
r3=resultadoMesa("San Bernardo",31,32,10)
r4=resultadoMesa("Las Condes",12,25,41)
r5=resultadoMesa("Providencia",4,50,30)
L=crearLista(r1,crearLista(r2,None))
L2=crearLista(r3,crearLista(r4,None))
L3=crearLista(r1,crearLista(r2,crearLista(r3, crearLista(r4, crearLista(r5, None)))))

# buscaMesa: lista(resultadoMesa) str int -> resultadoMesa
# determina si la lista contiene la mesa que se busca
# ejemplo buscaMesa(lista(Nunoa, 2), lista(Providencia, 3), lista(Recoleta, 4)) devuelve resultadoMesa
def buscaMesa(unaLista, circunscripcion, numeroMesa):
  if vacia(unaLista):
    return None
  else:
    if circunscripcion == cabeza(unaLista).circunscripcion:
      if numeroMesa == cabeza(unaLista).numeroMesa:
       return cabeza(unaLista)
      else:
        None
    else:
      return buscaMesa(cola(unaLista),circunscripcion,numeroMesa)

# Tests
assert buscaMesa(L,"Providencia",2)==resultadoMesa("Providencia",2,30,40)
assert buscaMesa(L,"Recoleta",4)==resultadoMesa("Recoleta",4,40,20)

# creamos una función auxiliar para agregaMesa
# hayMesa: lista(resultadoMesa) struct -> bool
def hayMesa(unaLista,r):
  if vacia(unaLista):
    return False
  if cabeza(unaLista) == r:
    return True
  else:
    return hayMesa(cola(unaLista),r)

#Tests
assert hayMesa(L,r1) == True
assert hayMesa(L2,r2) == False

#debemos sumar una estructura correspondiente a una mesa a una lista de otras mesas
# agregaMesa: resultadoMesa lista(resultadoMesa) -> lista(resultadoMesa)
def agregaMesa(unaLista,r):
  if r == None:
    return unaLista
  if vacia(unaLista):
    return lista(r,None)
  if r == None and vacia(unaLista):
    return None
  else:
    if hayMesa(unaLista, r) == True:
      return unaLista
    else:
      return (r, unaLista)

#Tests
assert agregaMesa(L,r3)==lista(resultadoMesa("San Bernardo",31,32,10),lista(resultadoMesa("Providencia",2,30, 40),lista(resultadoMesa("Recoleta",4,40,20),None)))

#creamos una funcion auxiliar para mesaConMasVotos
# sumaVotosMesa: resultadoMesa -> int
def sumaVotosMesa(r):
  if r == None:
    return 0
  else:
    return r.apruebo + r.rechazo

#Tests
assert sumaVotosMesa(r1)==70
assert sumaVotosMesa(r2)==60
assert sumaVotosMesa(None)==0

#creamos otra funcion auxiliar para mesaConMasVotos
# comparacionVotosMesa: rx ry -> resultadoMesa
def comparacionVotosMesa(rx,ry):
  if rx == None:
    return ry
  if ry == None:
    return rx
  if sumaVotosMesa(rx)==sumaVotosMesa(ry):
    return rx
  if sumaVotosMesa(rx)>sumaVotosMesa(ry):
    return rx
  else:
    return ry

#Tests
assert comparacionVotosMesa(r1,r2)==r1

#mesaConMasVotos: esta función recibe una lista de resultados L y retorna un dato del tipo resultadoMesa
#que representa la mesa con mayor número de votos totales de la lista. El número de votos totales de una
#mesa es la suma de los votos de las dos opciones. Si la lista L es vacía, esta función retorna None.

# mesaConMasVotos: lista(resultadoMesa) -> resultadoMesa
# para esto debemos sumar la cantidad de resultados de cada mesa y posteriormente compararlo con los resultados de las demas mesas

def mesaConMasVotos(unaLista):
  if vacia(unaLista):
    return None
  else:
    return fold(comparacionVotosMesa,cabeza(unaLista),unaLista)

#Tests
assert mesaConMasVotos(L)==r1
assert mesaConMasVotos(lista(r1, lista(r2, lista(r3, lista(r4, None)))))== r1
assert mesaConMasVotos(L3)==r5

#resultadosCircunscripcion: Para tener sacar una estadística para una circunscripción, se le pide
#implementar una función que reciba una lista de resultados L, y un string con una circunscripción, y retorne
#la lista de resultados pero sólo asociados a la circunscripción indicada. Por ejemplo, si la lista L contiene
#resultados para 4 mesas y 2 de ellas son de “Paine”, entonces resultadosCircunscripcion(L,”Paine”)
#debiera retornar una lista de largo 2 con los dos resultados asociados a “Paine”.

# resultadosCircunscripcion: lista(resultadoMesa) str(circunscripcion) -> lista(resultadoMesa)
# tenemos que usar filtro

def resultadosCircunscripcion(unaLista, circunscripcion):
  if vacia(unaLista):
    return None
  else:
  #creamos una funcion auxiliar para resultadosCircunscripcion
  #filtroCircunscripcion: lista(resultadoMesa) circunscripcion -> lista
    def filtroCircunscripcion(r):
      if circunscripcion==r.circunscripcion:
        return r
      else:
        return None
    
    return filtro(filtroCircunscripcion,unaLista)

#Tests
assert resultadosCircunscripcion(L3,"Providencia")==lista(r1,lista(r5,None))
assert resultadosCircunscripcion(L3,"Providencia")==lista(resultadoMesa("Providencia",2,30, 40),lista(resultadoMesa("Providencia",4,50,30),None))

#totalesPorCircunscripción: esta función recibe una lista de resultados L, una circunscripción, y un
#string con la palabra “Apruebo” o “Rechazo” y entrega el número de votos totales en la lista L por la
#opción indicada en el string pero, contando sólo los resultados de la circunscripción indicada.

# totalesPorCircunscripcion: lista(resultadoMesa) circunscripcion str -> int
def totalesPorCircunscripcion(unaLista, circunscripcion, voto):
  if vacia(unaLista):
    return 0
  else:
    nuevaLista=resultadosCircunscripcion(unaLista,circunscripcion)
    if voto=="apruebo":
      return cabeza(nuevaLista).apruebo + totalesPorCircunscripcion(cola(nuevaLista),circunscripcion,voto)
    else:
      return cabeza(nuevaLista).rechazo + totalesPorCircunscripcion(cola(nuevaLista),circunscripcion,voto)

# Tests
assert totalesPorCircunscripcion(L3,"Providencia","apruebo")==80
assert totalesPorCircunscripcion(L,"Recoleta","rechazo")==20

#totalVotosFinales: esta función recibe una lista de resultados L y un string con la palabra “Apruebo” o
#“Rechazo”, y retorna el número de votos totales obtenidos por la opción indicada.

# totalVotosFinales: lista(resultadoMesa) str -> int
def totalVotosFinales(unaLista,voto):
  if vacia(unaLista):
    return 0
  else:
    if voto=="apruebo":
      return cabeza(unaLista).apruebo + totalVotosFinales(cola(unaLista),voto)
    else:
      return cabeza(unaLista).rechazo + totalVotosFinales(cola(unaLista),voto)

#Tests
assert totalVotosFinales(L,"apruebo")==70
assert totalVotosFinales(L2,"rechazo")==51