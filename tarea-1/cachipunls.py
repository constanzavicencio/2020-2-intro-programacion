# -*- coding: utf-8 -*-
"""CachipunLS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1oJbWbEtYRalqn28jc5OUnGAEw5yizaFW
"""

# codificaJugada: str -> int
# transforma el nombre de la jugada a un valor numérico determinado
# si jugada es 'error', 'tijeras','papel', 'piedra', 'lagarto' o 'spock' produce -1, 0, 1, 2, 3 o 4 respectivamente
# ejemplo: codificaJugada('papel') debe producir 1
def codificaJugada(jugada):
  if jugada=='tijeras':
    return 0
  elif jugada=='papel':
    return 1
  elif jugada=='piedra':
    return 2
  elif jugada=='lagarto':
    return 3
  elif jugada=='spock':
    return 4
  else:
    return -1

#Tests
assert codificaJugada('papel')==1

# decodificaJugada: int -> str
# transforma el número de la jugada al nombre determinado de dicha jugada
# si jugada es 0, 1, 2, 3 o 4 produce 'tijeras','papel', 'piedra', 'lagarto' o 'spock' respectivamente
# si jugada es otro valor produce un texto vacío ('')
# ejemplo: decodificaJugada(1) debe producir 'papel'
def decodificaJugada(jugada):
  if jugada==0:
    return 'tijeras'
  elif jugada==1:
    return 'papel'
  elif jugada==2:
    return 'piedra'
  elif jugada==3:
    return 'lagarto'
  elif jugada==4:
    return 'spock'
  else:
    return ''

#Tests
assert decodificaJugada(1)=='papel'

# ganaJugada: int int -> int
# nos indica si gana el primer jugador, el segundo o empatan
# si gana el primer jugador, debe producir 1
# si gana el segundo jugador, debe producir -1
# si empatan, debe producir 0
# ejemplo: ganaJugada(0,3) debe producir 1
def ganaJugada(j1,j2):
  if j1==0 and j2==1:
    return 1
  if j1==0 and j2==3:
    return 1
  if j1==1 and j2==4:
    return 1
  if j1==1 and j2==2:
    return 1
  if j1==2 and j2==0:
    return 1
  if j1==2 and j2==3:
    return 1
  if j1==3 and j2==1:
    return 1
  if j1==3 and j2==4:
    return 1
  if j1==4 and j2==0:
    return 1
  if j1==4 and j2==2:
    return 1
  if j1==j2:
    return 0
  else:
    return -1

#Tests
assert ganaJugada(0,3)==1

# justificaResultado int int -> str
# nos indica por qué ganó el jugador
# ejemplo: justificaResultado(1,4) debería producir 'Papel refuta Spock'
def justificaResultado(j1,j2):
  if j1==0 and j2==1:
    return 'Tijeras cortan papel'
  if j1==0 and j2==3:
    return 'Tijeras decapitan lagarto'
  if j1==1 and j2==4:
    return 'Papel refuta Spock'
  if j1==1 and j2==2:
    return 'Papel cubre piedra'
  if j1==2 and j2==0:
    return 'Piedra aplasta tijera'
  if j1==2 and j2==3:
    return 'Piedra aplasta lagarto'
  if j1==3 and j2==1:
    return 'Lagarto come papel'
  if j1==3 and j2==4:
    return 'Lagarto envenena Spock'
  if j1==4 and j2==0:
    return 'Spock destruye tijeras'
  if j1==4 and j2==2:
    return 'Spock vaporiza piedra'
  if j2==0 and j1==1:
    return 'Tijeras cortan papel'
  if j2==0 and j1==3:
    return 'Tijeras decapitan lagarto'
  if j2==1 and j1==4:
    return 'Papel refuta Spock'
  if j2==1 and j1==2:
    return 'Papel cubre piedra'
  if j2==2 and j1==0:
    return 'Piedra aplasta tijera'
  if j2==2 and j1==3:
    return 'Piedra aplasta lagarto'
  if j2==3 and j1==1:
    return 'Lagarto come papel'
  if j2==3 and j1==4:
    return 'Lagarto envenena Spock'
  if j2==4 and j1==0:
    return 'Spock destruye tijeras'
  if j2==4 and j1==2:
    return 'Spock vaporiza piedra'
  if j1==j2:
    return 'Empate'

#Tests
assert justificaResultado(1,4)=='Papel refuta Spock'

import random

# generaJugadaComputador num o str -> int
# debe producir de manera aleatoria (para cualquier valor o string) un número entre 0 y 4, de manera equiprobable
# ejemplo: generaJugadaComputador('hola') debe producir cualquier número entre 0 y 4
def generaJugadaComputador():
    return random.randint(0,4)

#Tests
assert 0 <= generaJugadaComputador() <= 4